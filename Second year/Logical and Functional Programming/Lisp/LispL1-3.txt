3.
a) Definiti o functie care intoarce produsul a doi vectori.
b) Sa se construiasca o functie care intoarce adancimea unei liste.
c) Definiti o functie care sorteaza fara pastrarea dublurilor o lista
liniara.
d) Sa se scrie o functie care intoarce intersectia a doua multimi.

a)
(defun produs(x y)
  (cond
    ((or (null x) (null y)) nil)
    ((null ( cdr x))(cons (* (car x)(car y))(cdr y)))
    ((null ( cdr y))(cons (* (car x)(car y))(cdr x)))
    (t(cons (* (car x) (car y))(produs (cdr x)(cdr y))))))
    
(write(produs '(1 2 3) '(4 5)))

b)
(defun adancime(l a)
    (cond
        ((null l) a)
        ((listp (car l))(adancime (car l) (+ a 1)))
        (t(adancime (cdr l) a))))
        
(write (adancime '(1 2 ((3) (4)) 5 6) 0))

c)
(defun apartine(l e)
    (cond
        ((null l) nil)
        ((and (atom (car l)) (= (car l) e)) t)
        ((listp (car l))(apartine (car l) e))
        (t(apartine (cdr l) e))))
        
(defun insert(l e)
    (cond
        ((null l) (list e))
        ((= (car l)(max e (car l)))(cons e l))
        (t(cons(car l)(insert (cdr l) e)))))

(defun sortare(l p)
    (cond
        ((null l)p)
        ((apartine (cdr l) (car l))(sortare (cdr l) p))
        (t(sortare(cdr l)(insert p (car l))))))

(write (sortare '(4 3 2 1 4 3 2 1 1) ()))

d)
(defun apartine(l e)
    (cond
        ((null l) nil)
        ((and (atom (car l)) (= (car l) e)) t)
        ((listp (car l))(apartine (car l) e))
        (t(apartine (cdr l) e))))

(defun intersectie(l1 l2)
    (cond
        ((or (null l1) (null l2))nil)
        ((apartine l2 (car l1))(cons (car l1) (intersectie (cdr l1) l2)))
        (t(intersectie (cdr l1) l2))))

(write (intersectie '(1 2 3) '(2 3 4 5 6)))